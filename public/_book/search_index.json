[
["getting-data.html", "Course 8: Getting Data Exercise 1: Saving a data frame as an rds file Exercise 2: Scraping IMDB data", " Course 8: Getting Data Exercise 1: Saving a data frame as an rds file Level: Easy In this exercise, your student will learn how to save a data frame as a rds or rda file. Before, this exercise remind your students about the best practices of web scraping. Too much scraping at higher rates will put pressure on the website servers. There is a great article here about the best practices of web scraping. First ask your students to load the dataset mtcars and save it to an object called data. data &lt;- mtcars head(data) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 Now ask them to simply save the data frame data as an rds file with the same name. They should use a code similar to saveRDS(data, file = &quot;data.rds&quot;) You can also ask them to save the data frame as an rda file: save(data, file=&quot;data.rda&quot;) Exercise 2: Scraping IMDB data Level: Difficult In this exercise, your students will practice working with the package rvest and scraping data from the web. We’ll more specifically scrape top 250 movies from the website IMDB. This information can be found on this link. Ask your students to load the packages rvest, tidyverse and stringr. library(rvest) ## Loading required package: xml2 library(tidyverse) ## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1 ✔ purrr 0.2.4 ## ✔ tibble 1.4.2 ✔ dplyr 0.7.4 ## ✔ tidyr 0.8.0 ✔ stringr 1.4.0 ## ✔ readr 1.1.1 ✔ forcats 0.3.0 ## Warning: package &#39;stringr&#39; was built under R version 3.4.4 ## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ readr::guess_encoding() masks rvest::guess_encoding() ## ✖ dplyr::lag() masks stats::lag() ## ✖ purrr::pluck() masks rvest::pluck() library(stringr) The first step in using the rvest package and scraping data from the web is to read the content of the webpage we’re interested in. For this, we use the function read_html() from the package rvest. The address above only contains the first 50 movies but we can use similar process for the pages that come after. imdb &lt;- read_html(&quot;https://www.imdb.com/search/title?genres=drama&amp;groups=top_250&amp;sort=user_rating&quot;) The object imdb contains all the html content of the page in the form of an xml document that contains the head and the body of the page. Now, here is the important part. Let’s say we would like to make a data frame that has 4 columns. The first column is the name of the movies, the second column is their ratings, the third column is their genres, and the last column is the year the movies are made. We want to make this data frame for the top 50 movies. For scraping different components of a webpage we need to know the CSS selector of the specific part of the html file they’re scraping. We are going to use a Chrome Extension called SelectorGadget. SelectorGadget is an open source tool that makes CSS selector generation and discovery on complicated sites a breeze. They should install the Chrome Extension. They can download SelectorGadget Chrome Extension here. They can learn more about the SelectorGadget in this video. Using the SelectorGadget So how do we use the SelectorGadget to find the movie title? After installing the extension, ask your students to drag the bookmarklet to their bookmark bar, then go to any page and launch it. A box will open in the bottom right of the website. Ask them to click the title of the first movie on the list which is “The Shawshank Redemption”. Without clicking, SelectorGadget will show an orange box around the element under which it says h3 a. This is the CSS selector we need. Now how do we use rvest to choose the selector and read the information with that CSS selector? Your students will have to use the function html_nodes() in order to read information with that style. We will use the selector that we found using SelectorGadget and use the function html_text(\"h3 a\") to convert everything into text. Here’s what we need to do in order to read the titles of the movies. titles &lt;- imdb %&gt;% html_nodes(&quot;h3 a&quot;) %&gt;% html_text() titles ## [1] &quot;The Shawshank Redemption&quot; ## [2] &quot;The Godfather&quot; ## [3] &quot;The Dark Knight&quot; ## [4] &quot;The Godfather: Part II&quot; ## [5] &quot;The Lord of the Rings: The Return of the King&quot; ## [6] &quot;Pulp Fiction&quot; ## [7] &quot;Schindler&#39;s List&quot; ## [8] &quot;12 Angry Men&quot; ## [9] &quot;Fight Club&quot; ## [10] &quot;The Lord of the Rings: The Fellowship of the Ring&quot; ## [11] &quot;Forrest Gump&quot; ## [12] &quot;The Lord of the Rings: The Two Towers&quot; ## [13] &quot;Goodfellas&quot; ## [14] &quot;One Flew Over the Cuckoo&#39;s Nest&quot; ## [15] &quot;Seven Samurai&quot; ## [16] &quot;Interstellar&quot; ## [17] &quot;City of God&quot; ## [18] &quot;Saving Private Ryan&quot; ## [19] &quot;The Green Mile&quot; ## [20] &quot;Life Is Beautiful&quot; ## [21] &quot;Se7en&quot; ## [22] &quot;Léon: The Professional&quot; ## [23] &quot;The Silence of the Lambs&quot; ## [24] &quot;It&#39;s a Wonderful Life&quot; ## [25] &quot;Dangal&quot; ## [26] &quot;Whiplash&quot; ## [27] &quot;The Intouchables&quot; ## [28] &quot;The Prestige&quot; ## [29] &quot;The Departed&quot; ## [30] &quot;The Pianist&quot; ## [31] &quot;Gladiator&quot; ## [32] &quot;American History X&quot; ## [33] &quot;The Lion King&quot; ## [34] &quot;Cinema Paradiso&quot; ## [35] &quot;Grave of the Fireflies&quot; ## [36] &quot;Apocalypse Now&quot; ## [37] &quot;Casablanca&quot; ## [38] &quot;The Great Dictator&quot; ## [39] &quot;Modern Times&quot; ## [40] &quot;City Lights&quot; ## [41] &quot;Your Name.&quot; ## [42] &quot;Django Unchained&quot; ## [43] &quot;3 Idiots&quot; ## [44] &quot;Taare Zameen Par&quot; ## [45] &quot;Babam ve Oglum&quot; ## [46] &quot;The Lives of Others&quot; ## [47] &quot;Oldeuboi&quot; ## [48] &quot;American Beauty&quot; ## [49] &quot;Braveheart&quot; ## [50] &quot;Once Upon a Time in America&quot; ## [51] &quot; &quot; ## [52] &quot; &quot; ## [53] &quot; &quot; ## [54] &quot; &quot; ## [55] &quot; &quot; The object titles now contains the name of the movies. It should have 50 elements but it has 55. If they check the object they will realize that the last 5 elements are empty. So we should get rid of them. This is what we should do. titles &lt;- titles[titles != &quot; &quot;] Note that the object is a vector. We will create separate vectors for ratings, genres, and years and then will at the end create a data frame that contains all the 4 vectors. Now, we will use the SelectorGadget to find the CSS selector for years. The selector for years is h3 span. So similar to years &lt;- imdb %&gt;% html_nodes(&quot;h3 span&quot;) %&gt;% html_text() years ## [1] &quot;1.&quot; &quot;(1994)&quot; &quot;2.&quot; &quot;(1972)&quot; &quot;3.&quot; &quot;(2008)&quot; &quot;4.&quot; ## [8] &quot;(1974)&quot; &quot;5.&quot; &quot;(2003)&quot; &quot;6.&quot; &quot;(1994)&quot; &quot;7.&quot; &quot;(1993)&quot; ## [15] &quot;8.&quot; &quot;(1957)&quot; &quot;9.&quot; &quot;(1999)&quot; &quot;10.&quot; &quot;(2001)&quot; &quot;11.&quot; ## [22] &quot;(1994)&quot; &quot;12.&quot; &quot;(2002)&quot; &quot;13.&quot; &quot;(1990)&quot; &quot;14.&quot; &quot;(1975)&quot; ## [29] &quot;15.&quot; &quot;(1954)&quot; &quot;16.&quot; &quot;(2014)&quot; &quot;17.&quot; &quot;(2002)&quot; &quot;18.&quot; ## [36] &quot;(1998)&quot; &quot;19.&quot; &quot;(1999)&quot; &quot;20.&quot; &quot;(1997)&quot; &quot;21.&quot; &quot;(1995)&quot; ## [43] &quot;22.&quot; &quot;(1994)&quot; &quot;23.&quot; &quot;(1991)&quot; &quot;24.&quot; &quot;(1946)&quot; &quot;25.&quot; ## [50] &quot;(2016)&quot; &quot;26.&quot; &quot;(2014)&quot; &quot;27.&quot; &quot;(2011)&quot; &quot;28.&quot; &quot;(2006)&quot; ## [57] &quot;29.&quot; &quot;(2006)&quot; &quot;30.&quot; &quot;(2002)&quot; &quot;31.&quot; &quot;(2000)&quot; &quot;32.&quot; ## [64] &quot;(1998)&quot; &quot;33.&quot; &quot;(1994)&quot; &quot;34.&quot; &quot;(1988)&quot; &quot;35.&quot; &quot;(1988)&quot; ## [71] &quot;36.&quot; &quot;(1979)&quot; &quot;37.&quot; &quot;(1942)&quot; &quot;38.&quot; &quot;(1940)&quot; &quot;39.&quot; ## [78] &quot;(1936)&quot; &quot;40.&quot; &quot;(1931)&quot; &quot;41.&quot; &quot;(2016)&quot; &quot;42.&quot; &quot;(2012)&quot; ## [85] &quot;43.&quot; &quot;(2009)&quot; &quot;44.&quot; &quot;(2007)&quot; &quot;45.&quot; &quot;(2005)&quot; &quot;46.&quot; ## [92] &quot;(2006)&quot; &quot;47.&quot; &quot;(2003)&quot; &quot;48.&quot; &quot;(1999)&quot; &quot;49.&quot; &quot;(1995)&quot; ## [99] &quot;50.&quot; &quot;(1984)&quot; If they look at the object years, they will notice the peculiar content. The years are in parentheses and there are some other numbers as well. Then their next task is to write code that will only keep inside the parentheses. This is a bit tricky so feel free to give the code below. The function str_match_all() and the regex (regular expression) inside it will return everything inside the parentheses but since the output is in the form of a list, they can use the function unlist() to convert the output to a vector. Finally to convert the vector to numbers (since the outuput is the years movies are made and we want them to be numbers) we use the function as.numeric() as they have used many times. years &lt;- years %&gt;% str_match_all(&quot;(?&lt;=\\\\().+?(?=\\\\))&quot;) %&gt;% unlist() %&gt;% as.numeric() Object years should now look like a clean vector of the years movies are made. ## [1] 1994 1972 2008 1974 2003 1994 1993 1957 1999 2001 1994 2002 1990 1975 ## [15] 1954 2014 2002 1998 1999 1997 1995 1994 1991 1946 2016 2014 2011 2006 ## [29] 2006 2002 2000 1998 1994 1988 1988 1979 1942 1940 1936 1931 2016 2012 ## [43] 2009 2007 2005 2006 2003 1999 1995 1984 The following code will scrape genres and ratings from the website. genre = imdb %&gt;% html_nodes(&quot;.genre&quot;) %&gt;% html_text() %&gt;% # getting rid of the &quot;\\n&quot; in the strings str_replace_all(&quot;[\\r\\n]&quot; , &quot;&quot;) %&gt;% # getting rid of the extra spaces in both ends of the strings str_trim(side = c(&quot;both&quot;)) ratings = imdb %&gt;% html_nodes(&quot;.mode-advanced strong , .runtime , .genre&quot;) %&gt;% html_text() %&gt;% as.numeric() ## Warning in function_list[[k]](value): NAs introduced by coercion # There are some empty elements so we get rid of them here ratings &lt;- ratings[!is.na(ratings)] Now that all the data is downloaded, ask your students to combine all the vectors in a data frame called imdb_df. They should know to use the data.frame() function in order to do that. imdb_df = data.frame(titles, years, genre, ratings, stringsAsFactors = FALSE) head(imdb_df) ## titles years ## 1 The Shawshank Redemption 1994 ## 2 The Godfather 1972 ## 3 The Dark Knight 2008 ## 4 The Godfather: Part II 1974 ## 5 The Lord of the Rings: The Return of the King 2003 ## 6 Pulp Fiction 1994 ## genre ratings ## 1 Drama 9.3 ## 2 Crime, Drama 9.2 ## 3 Action, Crime, Drama 9.0 ## 4 Crime, Drama 9.0 ## 5 Adventure, Drama, Fantasy 8.9 ## 6 Crime, Drama 8.9 They can continue doing this for the rest of the top 250 movies. nba = read_html(&quot;http://www.espn.com/nba/standings&quot;) for(i in 1:13){ node = paste(&quot;.Table2__td:nth-child(&quot;,i,&quot;) .stat-cell&quot;, sep=&quot;&quot;) paste(&quot;column&quot;, i, sep = &quot;_&quot;) = nba %&gt;% html_nodes(&quot;node&quot;) %&gt;% html_text() } "]
]
